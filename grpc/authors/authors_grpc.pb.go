// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorsClient is the client API for Authors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorsClient interface {
	GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorsResponse, error)
	FindAuthor(ctx context.Context, in *FindAuthorRequest, opts ...grpc.CallOption) (*Author, error)
	AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
	UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
}

type authorsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorsClient(cc grpc.ClientConnInterface) AuthorsClient {
	return &authorsClient{cc}
}

func (c *authorsClient) GetAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorsResponse, error) {
	out := new(AuthorsResponse)
	err := c.cc.Invoke(ctx, "/Authors/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsClient) FindAuthor(ctx context.Context, in *FindAuthorRequest, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/Authors/FindAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsClient) AddAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/Authors/AddAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsClient) UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/Authors/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorsServer is the server API for Authors service.
// All implementations must embed UnimplementedAuthorsServer
// for forward compatibility
type AuthorsServer interface {
	GetAuthors(context.Context, *emptypb.Empty) (*AuthorsResponse, error)
	FindAuthor(context.Context, *FindAuthorRequest) (*Author, error)
	AddAuthor(context.Context, *Author) (*Author, error)
	UpdateAuthor(context.Context, *Author) (*Author, error)
	mustEmbedUnimplementedAuthorsServer()
}

// UnimplementedAuthorsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorsServer struct {
}

func (UnimplementedAuthorsServer) GetAuthors(context.Context, *emptypb.Empty) (*AuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedAuthorsServer) FindAuthor(context.Context, *FindAuthorRequest) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAuthor not implemented")
}
func (UnimplementedAuthorsServer) AddAuthor(context.Context, *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedAuthorsServer) UpdateAuthor(context.Context, *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedAuthorsServer) mustEmbedUnimplementedAuthorsServer() {}

// UnsafeAuthorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorsServer will
// result in compilation errors.
type UnsafeAuthorsServer interface {
	mustEmbedUnimplementedAuthorsServer()
}

func RegisterAuthorsServer(s grpc.ServiceRegistrar, srv AuthorsServer) {
	s.RegisterService(&Authors_ServiceDesc, srv)
}

func _Authors_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authors/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsServer).GetAuthors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authors_FindAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsServer).FindAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authors/FindAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsServer).FindAuthor(ctx, req.(*FindAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authors_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authors/AddAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsServer).AddAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authors_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authors/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsServer).UpdateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

// Authors_ServiceDesc is the grpc.ServiceDesc for Authors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authors",
	HandlerType: (*AuthorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthors",
			Handler:    _Authors_GetAuthors_Handler,
		},
		{
			MethodName: "FindAuthor",
			Handler:    _Authors_FindAuthor_Handler,
		},
		{
			MethodName: "AddAuthor",
			Handler:    _Authors_AddAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _Authors_UpdateAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authors/authors.proto",
}
